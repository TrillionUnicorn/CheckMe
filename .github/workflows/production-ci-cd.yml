name: Production CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'PRODUCTION/**'
  pull_request:
    branches: [main]
    paths:
      - 'PRODUCTION/**'

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.0.0'

jobs:
  # Test PRODUCTION_1 (SvelteKit + Bun)
  test-production-1:
    name: Test PRODUCTION_1
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Install backend dependencies
        working-directory: ./PRODUCTION/PRODUCTION_1/backend
        run: bun install
      
      - name: Install frontend dependencies
        working-directory: ./PRODUCTION/PRODUCTION_1/frontend
        run: bun install
      
      - name: Build backend
        working-directory: ./PRODUCTION/PRODUCTION_1/backend
        run: bun run build || echo "No build script"
      
      - name: Build frontend
        working-directory: ./PRODUCTION/PRODUCTION_1/frontend
        run: bun run build
      
      - name: Run tests
        working-directory: ./PRODUCTION/PRODUCTION_1
        run: |
          echo "Tests would run here"
          # bun test

  # Test PRODUCTION_2 (Next.js + Express)
  test-production-2:
    name: Test PRODUCTION_2
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: checkme
          POSTGRES_PASSWORD: checkme_password
          POSTGRES_DB: checkme_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: PRODUCTION/PRODUCTION_2/backend/package-lock.json
      
      - name: Install backend dependencies
        working-directory: ./PRODUCTION/PRODUCTION_2/backend
        run: npm ci
      
      - name: Install frontend dependencies
        working-directory: ./PRODUCTION/PRODUCTION_2/frontend
        run: npm ci
      
      - name: Generate Prisma Client
        working-directory: ./PRODUCTION/PRODUCTION_2/backend
        run: npx prisma generate
      
      - name: Run database migrations
        working-directory: ./PRODUCTION/PRODUCTION_2/backend
        env:
          DATABASE_URL: postgresql://checkme:checkme_password@localhost:5432/checkme_test
        run: npx prisma db push
      
      - name: Build backend
        working-directory: ./PRODUCTION/PRODUCTION_2/backend
        run: npm run build
      
      - name: Build frontend
        working-directory: ./PRODUCTION/PRODUCTION_2/frontend
        run: npm run build
      
      - name: Run tests
        working-directory: ./PRODUCTION/PRODUCTION_2
        run: |
          echo "Tests would run here"
          # npm test

  # Build and push Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-production-1, test-production-2]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push PRODUCTION_1 backend
        uses: docker/build-push-action@v5
        with:
          context: ./PRODUCTION/PRODUCTION_1/backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/checkme-p1-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/checkme-p1-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push PRODUCTION_1 frontend
        uses: docker/build-push-action@v5
        with:
          context: ./PRODUCTION/PRODUCTION_1/frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/checkme-p1-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/checkme-p1-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push PRODUCTION_2 backend
        uses: docker/build-push-action@v5
        with:
          context: ./PRODUCTION/PRODUCTION_2/backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/checkme-p2-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/checkme-p2-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push PRODUCTION_2 frontend
        uses: docker/build-push-action@v5
        with:
          context: ./PRODUCTION/PRODUCTION_2/frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/checkme-p2-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/checkme-p2-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Railway (PRODUCTION_1)
        run: |
          echo "Deploy PRODUCTION_1 to Railway"
          # railway up --service checkme-p1
      
      - name: Deploy to Vercel (PRODUCTION_2)
        run: |
          echo "Deploy PRODUCTION_2 to Vercel"
          # vercel --prod
      
      - name: Notify deployment
        run: |
          echo "Deployment complete!"
          # Send notification to Slack/Discord

